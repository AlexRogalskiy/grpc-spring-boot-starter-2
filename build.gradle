buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE'
    classpath 'com.netflix.nebula:gradle-info-plugin:3.5.0'
    classpath "com.netflix.nebula:nebula-publishing-plugin:4.9.1"
    classpath 'com.netflix.nebula:nebula-release-plugin:4.1.1'
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
  }
}

ext {
  grpcVersion = '1.1.2'
  protobufVersion = '3.2.0'
  exampleProjects = allprojects.findAll { it.name.startsWith 'example-' }
}

group = 'ru.alfalab.grpc.spring'

apply plugin: 'com.jfrog.bintray'

allprojects {
  repositories {
    jcenter()
  }

  apply plugin: 'idea'
  apply plugin: 'nebula.info'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'nebula.release'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'nebula.optional-base'

  group = rootProject.group

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  dependencyManagement {
    imports {
      mavenBom 'io.spring.platform:platform-bom:Brussels-RELEASE'
    }
    dependencies {
      dependencySet(group: 'io.grpc', version: grpcVersion) {
        entry 'grpc-all'
        entry 'grpc-netty'
        entry 'grpc-protobuf'
        entry 'grpc-stub'
      }

      dependency "com.google.protobuf:protobuf-java:$protobufVersion"
      dependency 'org.projectlombok:lombok:1.16.14'
      dependency 'org.codehaus.groovy:groovy-all:2.4.8'

      dependency 'org.spockframework:spock-core:1.1-groovy-2.4-rc-3'
      dependency 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-3'
    }
  }

  dependencies {
    provided 'org.projectlombok:lombok'

    testCompile 'org.codehaus.groovy:groovy-all'
    testCompile 'org.spockframework:spock-core'
    testCompile 'org.spockframework:spock-spring'
  }

  test {
    reports {
      junitXml.enabled = true
      html.enabled = true
    }
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled true
      html.destination "${buildDir}/jacocoHtml"
    }
  }
}

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  reportOn subprojects*.test
}

configure(subprojects - exampleProjects - project(':examples')) {
  apply plugin: 'com.github.kt3k.coveralls'
  apply plugin: 'nebula.maven-publish'
  apply plugin: 'com.jfrog.bintray'

  bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['nebula']
    pkg {
      repo = 'maven'
      name = 'grpc-spring-boot-starter'
      userOrg = 'lavcraft'
      licenses = ['MIT']
      vcsUrl = 'https://github.com/lavcraft/grpc-spring-boot-starter'
    }
  }

  bintrayUpload.onlyIf { !project.version.toString().toUpperCase().endsWith("-SNAPSHOT") }
}

/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * Configuration for examples
 * Copy and use, and get plugins/buildscript block from above
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */
configure(exampleProjects) {
  apply plugin: 'java'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'com.google.protobuf'

  ext {
    protoGenDir = file('generated-src/')
  }

  dependencies {
    compile 'io.grpc:grpc-stub'
    compile 'io.grpc:grpc-protobuf'
    compile 'io.grpc:grpc-netty'
    compile 'io.netty:netty-common'
    compile 'io.netty:netty-transport'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compile project(':starter')

    testCompile 'org.springframework.boot:spring-boot-starter-test'
  }

  sourceSets {
    main {
      proto {
        srcDir 'src/main/proto'
      }
      java {
        srcDir "$protoGenDir/main/java"
      }
    }
  }

  idea {
    module {
      sourceDirs += file('./src/main/proto')
      sourceDirs += file("${protoGenDir}")
    }
  }

  protobuf {
    protoc {
      artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    plugins {
      grpc {
        artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
      }
    }

    generateProtoTasks {
      ofSourceSet('main').each { task ->
        task.builtins {
          java {
            outputSubDir = 'java'
          }
        }
        task.plugins {
          grpc {
            outputSubDir = 'java'
          }
        }
      }
    }
    generatedFilesBaseDir = protoGenDir
  }

  task cleanProtoGen {
    doFirst {
      delete "${protoGenDir}"
    }
  }
  clean.dependsOn cleanProtoGen

  springBoot {
    executable = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.4'
}
